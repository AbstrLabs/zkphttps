/// Transforms u8 value into u32 by using mapping array
function u8_u32(val: u8) -> u32 {
    let (u8value, u32value) = get_mapping()[val];
    return u32value;
}

/// Transforms u32 value into u8 by using mapping array
function u32_u8(val: u32) -> u8 {
    let (u8value, u32value) = get_mapping()[val];
    return u8value;
}

function main(a: u8, b: u32) -> (u32, u8) {
    return (
        u8_u32(a),
        u32_u8(b)
    );
}

/// Get map of u8 values to u32
function get_mapping() -> [(u8, u32); 256] {
    return [
        (0u8, 0u32), (1u8, 1u32), (2u8, 2u32), (3u8, 3u32), 
        (4u8, 4u32), (5u8, 5u32), (6u8, 6u32), (7u8, 7u32), 
        (8u8, 8u32), (9u8, 9u32), 
        (10u8, 10u32), (11u8, 11u32), (12u8, 12u32), (13u8, 13u32),
        (14u8, 14u32), (15u8, 15u32), (16u8, 16u32), (17u8, 17u32),
        (18u8, 18u32), (19u8, 19u32), (20u8, 20u32), (21u8, 21u32),
        (22u8, 22u32), (23u8, 23u32), (24u8, 24u32), (25u8, 25u32),
        (26u8, 26u32), (27u8, 27u32), (28u8, 28u32), (29u8, 29u32),
        (30u8, 30u32), (31u8, 31u32), (32u8, 32u32), (33u8, 33u32),
        (34u8, 34u32), (35u8, 35u32), (36u8, 36u32), (37u8, 37u32),
        (38u8, 38u32), (39u8, 39u32), (40u8, 40u32), (41u8, 41u32),
        (42u8, 42u32), (43u8, 43u32), (44u8, 44u32), (45u8, 45u32),
        (46u8, 46u32), (47u8, 47u32), (48u8, 48u32), (49u8, 49u32),
        (50u8, 50u32), (51u8, 51u32), (52u8, 52u32), (53u8, 53u32),
        (54u8, 54u32), (55u8, 55u32), (56u8, 56u32), (57u8, 57u32),
        (58u8, 58u32), (59u8, 59u32), (60u8, 60u32), (61u8, 61u32),
        (62u8, 62u32), (63u8, 63u32), (64u8, 64u32), (65u8, 65u32),
        (66u8, 66u32), (67u8, 67u32), (68u8, 68u32), (69u8, 69u32),
        (70u8, 70u32), (71u8, 71u32), (72u8, 72u32), (73u8, 73u32),
        (74u8, 74u32), (75u8, 75u32), (76u8, 76u32), (77u8, 77u32),
        (78u8, 78u32), (79u8, 79u32), (80u8, 80u32), (81u8, 81u32),
        (82u8, 82u32), (83u8, 83u32), (84u8, 84u32), (85u8, 85u32),
        (86u8, 86u32), (87u8, 87u32), (88u8, 88u32), (89u8, 89u32),
        (90u8, 90u32), (91u8, 91u32), (92u8, 92u32), (93u8, 93u32),
        (94u8, 94u32), (95u8, 95u32), (96u8, 96u32), (97u8, 97u32),
        (98u8, 98u32), (99u8, 99u32),
        (100u8, 100u32), (101u8, 101u32), (102u8, 102u32), (103u8, 103u32),
        (104u8, 104u32), (105u8, 105u32), (106u8, 106u32), (107u8, 107u32),
        (108u8, 108u32), (109u8, 109u32), (110u8, 110u32), (111u8, 111u32),
        (112u8, 112u32), (113u8, 113u32), (114u8, 114u32), (115u8, 115u32),
        (116u8, 116u32), (117u8, 117u32), (118u8, 118u32), (119u8, 119u32),
        (120u8, 120u32), (121u8, 121u32), (122u8, 122u32), (123u8, 123u32),
        (124u8, 124u32), (125u8, 125u32), (126u8, 126u32), (127u8, 127u32),
        (128u8, 128u32), (129u8, 129u32), (130u8, 130u32), (131u8, 131u32),
        (132u8, 132u32), (133u8, 133u32), (134u8, 134u32), (135u8, 135u32), 
        (136u8, 136u32), (137u8, 137u32), (138u8, 138u32), (139u8, 139u32), 
        (140u8, 140u32), (141u8, 141u32), (142u8, 142u32), (143u8, 143u32), 
        (144u8, 144u32), (145u8, 145u32), (146u8, 146u32), (147u8, 147u32), 
        (148u8, 148u32), (149u8, 149u32), (150u8, 150u32), (151u8, 151u32), 
        (152u8, 152u32), (153u8, 153u32), (154u8, 154u32), (155u8, 155u32),
        (156u8, 156u32), (157u8, 157u32), (158u8, 158u32), (159u8, 159u32),
        (160u8, 160u32), (161u8, 161u32), (162u8, 162u32), (163u8, 163u32),
        (164u8, 164u32), (165u8, 165u32), (166u8, 166u32), (167u8, 167u32),
        (168u8, 168u32), (169u8, 169u32), (170u8, 170u32), (171u8, 171u32), 
        (172u8, 172u32), (173u8, 173u32), (174u8, 174u32), (175u8, 175u32),
        (176u8, 176u32), (177u8, 177u32), (178u8, 178u32), (179u8, 179u32),
        (180u8, 180u32), (181u8, 181u32), (182u8, 182u32), (183u8, 183u32),
        (184u8, 184u32), (185u8, 185u32), (186u8, 186u32), (187u8, 187u32),
        (188u8, 188u32), (189u8, 189u32), (190u8, 190u32), (191u8, 191u32),
        (192u8, 192u32), (193u8, 193u32), (194u8, 194u32), (195u8, 195u32),
        (196u8, 196u32), (197u8, 197u32), (198u8, 198u32), (199u8, 199u32),
        (200u8, 200u32), (201u8, 201u32), (202u8, 202u32), (203u8, 203u32),
        (204u8, 204u32), (205u8, 205u32), (206u8, 206u32), (207u8, 207u32),
        (208u8, 208u32), (209u8, 209u32), (210u8, 210u32), (211u8, 211u32),
        (212u8, 212u32), (213u8, 213u32), (214u8, 214u32), (215u8, 215u32), 
        (216u8, 216u32), (217u8, 217u32), (218u8, 218u32), (219u8, 219u32), 
        (220u8, 220u32), (221u8, 221u32), (222u8, 222u32), (223u8, 223u32),
        (224u8, 224u32), (225u8, 225u32), (226u8, 226u32), (227u8, 227u32), 
        (228u8, 228u32), (229u8, 229u32), (230u8, 230u32), (231u8, 231u32), 
        (232u8, 232u32), (233u8, 233u32), (234u8, 234u32), (235u8, 235u32), 
        (236u8, 236u32), (237u8, 237u32), (238u8, 238u32), (239u8, 239u32),
        (240u8, 240u32), (241u8, 241u32), (242u8, 242u32), (243u8, 243u32),
        (244u8, 244u32), (245u8, 245u32), (246u8, 246u32), (247u8, 247u32),
        (248u8, 248u32), (249u8, 249u32), (250u8, 250u32), (251u8, 251u32),
        (252u8, 252u32), (253u8, 253u32), (254u8, 254u32), (255u8, 255u32),
    ];
}


@test
function test_u8_to_u32() {
    console.assert(u8_u32(0) == 0);
    console.assert(u8_u32(10) == 10);
    console.assert(u8_u32(11) == 11);
    console.assert(u8_u32(12) == 12);
    console.assert(u8_u32(13) == 13);
    console.assert(u8_u32(100) == 100);
    console.assert(u8_u32(255) == 255);
}

@test
function test_u32_to_u8() {
    console.assert(u32_u8(0) == 0);
    console.assert(u32_u8(10) == 10);
    console.assert(u32_u8(11) == 11);
    console.assert(u32_u8(12) == 12);
    console.assert(u32_u8(13) == 13);
    console.assert(u32_u8(100) == 100);
    console.assert(u32_u8(255) == 255);
}

@test
function test_loop() {
    for i in 0..255 {
        console.assert(u8_u32(u32_u8(i)) == i);
    }
}
